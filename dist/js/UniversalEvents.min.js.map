{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/UniversalEvents.js","UniversalEvents.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","UniversalEvents","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_shimSetImmediate","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","setImmediate","setTimeout","validEvents","_validEvents","Set","_eventListeners","eventName","handler","has","push","addEventListener","handlers","index","indexOf","splice","data","runHandler","boundHandler","boundData","apply","bind","undefined","raiseEvent","successEventName","failureEventName","Promise","resolve","reject","successHandler","val","removeEventListener","failureHandler","err"],"mappings":"CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,KAAAJ,EAAAK,gBAAAV,MAAA,WAAA,MAAA,SAAAW,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAhB,GAAA,GAAAqB,OAAA,uBAAAL,EAAA,IAAA,MAAAhB,GAAAsB,KAAA,mBAAAtB,EAAA,GAAAuB,GAAAV,EAAAG,IAAAf,WAAAW,GAAAI,GAAA,GAAAQ,KAAAD,EAAAtB,QAAA,SAAAU,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAtB,QAAAU,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAf,QAAA,IAAA,GAAAmB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAjB,EAAAD,GCAA,YCSA,SAAS0B,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCANhHC,OAAOC,eAAe/B,EAAS,cAC3BgC,OAAO,GAGX,IDLIC,GCKAC,EAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIlB,GAAI,EAAGA,EAAIkB,EAAMb,OAAQL,IAAK,CAAE,GAAImB,GAAaD,EAAMlB,EAAImB,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMX,OAAOC,eAAeK,EAAQE,EAAWI,IAAKJ,IAAiB,MAAO,UAAUV,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYR,EAAiBP,EAAYiB,UAAWF,GAAiBC,GAAaT,EAAiBP,EAAagB,GAAqBhB,KDH7hBK,GADwB,kBAAjBa,cACa,SAAU/C,GAC1B,MAAO+C,cAAa/C,IAGJ,SAASA,GACzB,MAAOgD,YAAWhD,EAAG,GCyB7B,IDVqBU,GAAe,WAQrB,QARMA,GAQLuC,GACR,GCWAtB,EAAgBlB,KDpBHC,GASRuC,EAEE,CAAA,GAA2B,gBAAhBA,GACd,KAAM,IAAI5B,OAAM,gFAEhBZ,MAAKyC,aAAe,GAAIC,KAAIF,OAJ5BxC,MAAKyC,aAAe,IAOxBzC,MAAK2C,mBCwKT,MAhJAjB,GDzCiBzB,IC0CbiC,IAAK,mBACLV,MDhBY,SAACoB,EAAWC,GACxB,GAAI7C,KAAKyC,eAAiBzC,KAAKyC,aAAaK,IAAIF,GAC5C,KAAM,IAAIhC,OAAM,uBAAyBgC,EAS7C,OANK5C,MAAK2C,gBAAgBC,KACtB5C,KAAK2C,gBAAgBC,OAGzB5C,KAAK2C,gBAAgBC,GAAWG,KAAKF,GAE9B7C,QC2BPkC,IAAK,KACLV,MDlBF,SAACoB,EAAWC,GACV,MAAO7C,MAAKgD,iBAAiBJ,EAAWC,MC6BxCX,IAAK,sBACLV,MDpBe,SAACoB,EAAWC,GAC3B,GAAI7C,KAAKyC,eAAiBzC,KAAKyC,aAAaK,IAAIF,GAC5C,KAAM,IAAIhC,OAAM,uBAAyBgC,EAG7C,IAAIK,GAAWjD,KAAK2C,gBAAgBC,EAEpC,IAAIK,EAAU,CACV,GAAIC,GAAQD,EAASE,QAAQN,EAC7BI,GAASG,OAAOF,EAAO,GAG3B,MAAOlD,SCgCPkC,IAAK,aACLV,MDtBM,SAACoB,EAAWS,GAClB,GAAIrD,KAAKyC,eAAiBzC,KAAKyC,aAAaK,IAAIF,GAC5C,KAAM,IAAIhC,OAAM,uBAAyBgC,EAG7C,IAAIK,GAAWjD,KAAK2C,gBAAgBC,EAEpC,IAAIK,EAAU,CACV,IAAK,GAAItC,GAAI,EAAGA,EAAIsC,EAASjC,OAAQL,IAAK,CACtC,GAAIkC,GAAUI,EAAStC,GAEnB2C,EAAa,SAAUC,EAAcC,GACrCD,EAAaE,MAAMzD,MAAOwD,KAC5BE,KAAKC,OAAWd,EAASQ,EAE3B5B,GAAkB6B,GAEtB,OAAO,EAEX,OAAO,KCkCPpB,IAAK,OACLV,MDxBA,SAACoB,EAAWS,GACZ,MAAOrD,MAAK4D,WAAWhB,EAAWS,MCmClCnB,IAAK,QACLV,MD1BC,SAACqC,EAAkBC,GACpB,GAAI/D,GAAOC,IAEX,IAAIA,KAAKyC,aAAc,CACnB,IAAKzC,KAAKyC,aAAaK,IAAIe,GACvB,KAAM,IAAIjD,OAAM,uBAAyBiD,EAE7C,KAAK7D,KAAKyC,aAAaK,IAAIgB,GACvB,KAAM,IAAIlD,OAAM,uBAAyBkD,EAE7C,IAAID,IAAqBC,EACrB,KAAM,IAAIlD,OAAM,iDAAmDkD,GAI3E,MAAO,IAAIC,SACP,SAASC,EAASC,GACd,QAASC,GAAeC,GACpBpE,EAAKqE,oBAAoBP,EAAkBK,GAC3CnE,EAAKqE,oBAAoBN,EAAkBO,GAE3CL,EAAQG,GAGZ,QAASE,GAAeC,GACpBvE,EAAKqE,oBAAoBP,EAAkBK,GAC3CnE,EAAKqE,oBAAoBN,EAAkBO,GAE3CJ,EAAOK,GAGXvE,EAAKiD,iBAAiBa,EAAkBK,GACxCnE,EAAKiD,iBAAiBc,EAAkBO,SA3JnCpE,IC4LrBT,GAAQ,WD5LaS,EC6LrBR,EAAOD,QAAUA,EAAQ,qBAEd,IAAI","file":"UniversalEvents.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar _shimSetImmediate;\nif (typeof setImmediate === 'function') {\n    _shimSetImmediate = function (f) {\n        return setImmediate(f);\n    };\n} else {\n    _shimSetImmediate = function(f) {\n        return setTimeout(f, 0);\n    };\n}\n\n/**\n * UniversalEvents is a class for managing events\n *\n * Each event has a name, which is a string, which allows one UniversalEvents object to receive and coordinate multiple types of event.\n *\n * There are 2 methods for listening for an event.\n * The first is to attach a handler function with {@link UniversalEvents#on}.\n * The second is to await an event with {@link UniversalEvents#await} which returns a `Promise`.\n *\n * Events can then be raised with `emit`, optionally with arbitrary data which is passed to those listening for that event.\n */\nexport default class UniversalEvents {\n\n    /**\n     * Create a UniversalEvents object\n     *\n     * @param {?(Set<string>|Array<string>)} [validEvents] - The set of events which this object should handle.\n     * If undefined, null, or empty, this object will handle all events.\n     */\n    constructor(validEvents) {\n        if (!validEvents) {\n            this._validEvents = null;\n        } else if (typeof validEvents === 'string') {\n            throw new Error('Use of a string is probably a typo, should be Set or Array, or other iterable');\n        } else {\n            this._validEvents = new Set(validEvents);\n        }\n\n        this._eventListeners = {};\n    }\n\n    /**\n     * Listen for an event. Alias for {@link UniversalEvents#on}\n     *\n     * @param {string} eventName - The name of the event to listen for\n     * @param {function(data: Object)} handler - The function which is called when the event is raised\n     * @return {UniversalEvents} - Returns the UniversalEvents object, allowing calls to be chained\n     */\n    addEventListener(eventName, handler) {\n        if (this._validEvents && !this._validEvents.has(eventName)) {\n            throw new Error('Unknown event name: ' + eventName)\n        }\n\n        if (!this._eventListeners[eventName]) {\n            this._eventListeners[eventName] = [];\n        }\n\n        this._eventListeners[eventName].push(handler);\n\n        return this;\n    }\n\n    /**\n     * Listen for an event. Alias for {@link UniversalEvents#addEventListener}\n     *\n     * @param {string} eventName - The name of the event to listen for\n     * @param {function(data: Object)} handler - The function which is called when the event is raised\n     * @return {UniversalEvents} - Returns the UniversalEvents object, allowing calls to be chained\n     */\n    on(eventName, handler) {\n        return this.addEventListener(eventName, handler);\n    }\n\n    /**\n     * Remove a listener for an event. Be careful when doing this, you should only really remove listeners that were added by you.\n     *\n     * @param {string} eventName - The name of the event the handler was attached to\n     * @param {function(data: Object)} handler - The function to remove\n     * @return {UniversalEvents} - Returns the UniversalEvents object, allowing calls to be chained\n     */\n    removeEventListener(eventName, handler) {\n        if (this._validEvents && !this._validEvents.has(eventName)) {\n            throw new Error('Unknown event name: ' + eventName)\n        }\n\n        var handlers = this._eventListeners[eventName];\n\n        if (handlers) {\n            var index = handlers.indexOf(handler);\n            handlers.splice(index, 1);\n        }\n\n        return this;\n    }\n\n    /**\n     * Raise an event. Causes all listeners of this event to run.\n     * Alias of {@link UniversalEvents#emit}\n     *\n     * @param {string} eventName - The name of the event to raise\n     * @param {?Object} [data] - An object passed to the handlers\n     * @return {boolean} - A boolean representing whether the event had any handlers\n     */\n    raiseEvent(eventName, data) {\n        if (this._validEvents && !this._validEvents.has(eventName)) {\n            throw new Error('Unknown event name: ' + eventName)\n        }\n\n        var handlers = this._eventListeners[eventName];\n\n        if (handlers) {\n            for (var i = 0; i < handlers.length; i++) {\n                var handler = handlers[i];\n\n                var runHandler = function (boundHandler, boundData) {\n                    boundHandler.apply(this, [boundData]);\n                }.bind(undefined, handler, data);\n\n                _shimSetImmediate(runHandler);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Raise an event. Causes all listeners of this event to run.\n     * Alias of {@link UniversalEvents#raiseEvent}\n     *\n     * @param {string} eventName - The name of the event to raise\n     * @param {?Object} [data] - An object passed to the handlers\n     * @return {boolean} - A boolean representing whether the event had any handlers\n     */\n    emit(eventName, data) {\n        return this.raiseEvent(eventName, data);\n    }\n\n    /**\n     * Await an event for success and another event for failure.\n     *\n     * @param {string} successEventName - The name of the event which will resolve the promise when raised\n     * @param {string} failureEventName - The name of the event which will reject the promise when raised\n     * @return {Promise} - A promise which will be resolved on success and rejected on failure\n     */\n    await(successEventName, failureEventName) {\n        var self = this;\n\n        if (this._validEvents) {\n            if (!this._validEvents.has(successEventName)) {\n                throw new Error('Unknown event name: ' + successEventName)\n            }\n            if (!this._validEvents.has(failureEventName)) {\n                throw new Error('Unknown event name: ' + failureEventName)\n            }\n            if (successEventName === failureEventName) {\n                throw new Error('Identical event name for success and failure: ' + failureEventName)\n            }\n        }\n\n        return new Promise(\n            function(resolve, reject) {\n                function successHandler(val) {\n                    self.removeEventListener(successEventName, successHandler);\n                    self.removeEventListener(failureEventName, failureHandler);\n\n                    resolve(val);\n                }\n\n                function failureHandler(err) {\n                    self.removeEventListener(successEventName, successHandler);\n                    self.removeEventListener(failureEventName, failureHandler);\n\n                    reject(err);\n                }\n\n                self.addEventListener(successEventName, successHandler);\n                self.addEventListener(failureEventName, failureHandler);\n            });\n    }\n}\n",null],"sourceRoot":"/source/"}