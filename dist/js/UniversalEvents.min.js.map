{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/browserify/node_modules/process/browser.js","UniversalEvents.min.js","node_modules/q/q.js","src/UniversalEvents.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","UniversalEvents","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","setTimeout","len","run","clearTimeout","Item","fun","array","noop","process","nextTick","args","Array","arguments","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","name","cwd","chdir","dir","umask",2,"definition","bootstrap","ses","ok","makeQ","previousQ","Q","noConflict","uncurryThis","isObject","value","Object","isStopIteration","exception","object_toString","QReturnValue","makeStackTraceLong","error","promise","hasStacks","stack","indexOf","STACK_JUMP_SEPARATOR","stacks","p","source","unshift","concatedStacks","join","filterStackString","stackString","lines","split","desiredLines","line","isInternalFrame","isNodeFrame","stackLine","getFileNameAndLineNumber","attempt1","exec","Number","attempt2","attempt3","fileNameAndLineNumber","fileName","lineNumber","qFileName","qStartingLine","qEndingLine","captureLine","firstLine","deprecate","callback","alternative","console","warn","Promise","isPromiseAlike","coerce","fulfill","defer","become","newPromise","resolvedPromise","array_reduce","messages","undefined","message","promiseDispatch","progressListeners","deferred","object_create","resolve","op","operands","array_slice","valueOf","nearerValue","nearer","isPromise","inspect","state","longStackSupport","substring","reject","reason","notify","progress","progressListener","resolver","TypeError","race","answerPs","then","descriptor","fallback","result","inspected","when","fulfilled","rejected","progressed","object","isPending","isFulfilled","isRejected","resetUnhandledRejections","unhandledReasons","unhandledRejections","trackUnhandledRejections","trackRejection","runAfter","array_indexOf","reportedUnhandledRejections","untrackRejection","at","atReport","splice","rejection","get","set","rhs","delete","post","thisp","keys","object_keys","master","isDef","dispatch","spread","async","makeGenerator","continuer","verb","arg","StopIteration","generator","done","errback","bind","spawn","_return","promised","all","promises","pendingCount","index","snapshot","any","prev","current","onFulfilled","onRejected","onProgress","allResolved","array_map","allSettled","nodeify","nodeback","flush","task","domain","head","next","enter","runSingle","laterQueue","pop","flushing","isNodeJS","exit","tail","requestTick","toString","setImmediate","MessageChannel","channel","port1","onmessage","requestPortTick","port2","postMessage","Function","slice","reduce","basis","map","collect","create","Type","object_hasOwnProperty","hasOwnProperty","key","ReturnValue","Q_DEBUG","makeNodeResolver","passByCopy","x","y","that","makePromise","_fulfilled","_rejected","newException","_progressed","newValue","threw","onerror","tap","fcall","thenResolve","thenReject","getUnhandledReasons","stopUnhandledRejectionTracking","del","mapply","send","mcall","invoke","fapply","fbind","regardless","fail","fin","onUnhandledError","ms","timeoutId","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","bound","nmapply","npost","nsend","nmcall","ninvoke","_process",3,"_classCallCheck","instance","Constructor","defineProperty","shimSetImmediate","_createClass","defineProperties","target","props","enumerable","configurable","writable","protoProps","staticProps","validEvents","Set","_eventListeners","eventName","handler","has","addEventListener","handlers","data","runHandler","boundHandler","boundData","raiseEvent","successEventName","failureEventName","successHandler","val","removeEventListener","failureHandler","err","q"],"mappings":"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","file":"UniversalEvents.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n",null,"// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n        // Prefer window over self for add-on scripts. Use self for\n        // non-windowed contexts.\n        var global = typeof window !== \"undefined\" ? window : self;\n\n        // Get the `window` object, save the previous Q global\n        // and initialize Q as a global.\n        var previousQ = global.Q;\n        global.Q = definition();\n\n        // Add a noConflict function so Q can be removed from the\n        // global namespace.\n        global.Q.noConflict = function () {\n            global.Q = previousQ;\n            return this;\n        };\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.nextTick()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack &&\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack) {\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        error.stack = filterStackString(concatedStacks);\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n        promise.source = newPromise;\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected() {\n            pendingCount--;\n            if (pendingCount === 0) {\n                deferred.reject(new Error(\n                    \"Can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected.\"\n                ));\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\nQ.noConflict = function() {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n","'use strict';\n\nvar Q = require('q');\n\nvar shimSetImmediate;\nif (typeof setImmediate === 'function') {\n    shimSetImmediate = function (f) {\n        return setImmediate(f);\n    }\n} else if (typeof process !== 'undefined' && typeof process.nextTick === 'function') {\n    shimSetImmediate = process.nextTick\n} else {\n    shimSetImmediate = function(f) {\n        return setTimeout(f, 0);\n    }\n}\n\nexport default class UniversalEvents {\n\n    constructor(validEvents) {\n        if (!validEvents) {\n            this.validEvents = null;\n        } else if (typeof validEvents === 'string') {\n            throw new Error('Use of a string is probably a typo, should be Set or Array, or other iterable');\n        } else {\n            this.validEvents = new Set(validEvents);\n        }\n\n        this._eventListeners = {};\n    }\n\n    addEventListener(eventName, handler) {\n        if (this.validEvents && !this.validEvents.has(eventName)) {\n            throw new Error('Unknown event name: ' + eventName)\n        }\n\n        if (!this._eventListeners[eventName]) {\n            this._eventListeners[eventName] = [];\n        }\n\n        this._eventListeners[eventName].push(handler);\n\n        return this;\n    }\n\n    on(eventName, handler) {\n        return this.addEventListener(eventName, handler);\n    }\n\n    removeEventListener(eventName, handler) {\n        if (this.validEvents && !this.validEvents.has(eventName)) {\n            throw new Error('Unknown event name: ' + eventName)\n        }\n\n        var handlers = this._eventListeners[eventName];\n\n        if (handlers) {\n            var index = handlers.indexOf(handler);\n            handlers.splice(index, 1);\n        }\n\n        return this;\n    }\n\n    raiseEvent(eventName, data) {\n        if (this.validEvents && !this.validEvents.has(eventName)) {\n            throw new Error('Unknown event name: ' + eventName)\n        }\n\n        var handlers = this._eventListeners[eventName];\n\n        if (handlers) {\n            for (var i = 0; i < handlers.length; i++) {\n                var handler = handlers[i];\n\n                var runHandler = function (boundHandler, boundData) {\n                    boundHandler.apply(this, [boundData]);\n                }.bind(undefined, handler, data);\n\n                shimSetImmediate(runHandler);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    emit(eventName, data) {\n        return this.raiseEvent(eventName, data);\n    }\n\n    await(successEventName, failureEventName) {\n        var self = this;\n\n        if (this.validEvents) {\n            if (!this.validEvents.has(successEventName)) {\n                throw new Error('Unknown event name: ' + successEventName)\n            }\n            if (!this.validEvents.has(failureEventName)) {\n                throw new Error('Unknown event name: ' + failureEventName)\n            }\n            if (successEventName === failureEventName) {\n                throw new Error('Identical event name for success and failure: ' + failureEventName)\n            }\n        }\n\n        var defer = Q.defer();\n\n        function successHandler(val) {\n            self.removeEventListener(successEventName, successHandler);\n            self.removeEventListener(failureEventName, failureHandler);\n\n            defer.resolve(val);\n        }\n\n        function failureHandler(err) {\n            self.removeEventListener(successEventName, successHandler);\n            self.removeEventListener(failureEventName, failureHandler);\n\n            defer.reject(err);\n        }\n\n        this.addEventListener(successEventName, successHandler);\n        this.addEventListener(failureEventName, failureHandler);\n\n        return defer.promise;\n    }\n}\n"],"sourceRoot":"/source/"}