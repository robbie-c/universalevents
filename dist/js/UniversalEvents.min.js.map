{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/UniversalEvents.js","UniversalEvents.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","UniversalEvents","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","validEvents","_validEvents","Set","_eventListeners","eventName","has","handler","_checkEventName","push","addEventListener","innerHandler","data","removeEventListener","handlers","index","indexOf","splice","apply","raiseEvent","successEventName","failureEventName","Promise","resolve","reject","successHandler","val","failureHandler","err","callback","undefined"],"mappings":"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","file":"UniversalEvents.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\n/**\n * UniversalEvents is a class for managing events\n *\n * Each event has a name, which is a string, which allows one UniversalEvents object to receive and coordinate multiple types of event.\n *\n * There are 2 methods for listening for an event.\n * The first is to attach a handler function with {@link UniversalEvents#on}.\n * The second is to await an event with {@link UniversalEvents#await} which returns a `Promise`.\n *\n * Events can then be raised with `emit`, optionally with arbitrary data which is passed to those listening for that event.\n */\nexport default class UniversalEvents {\n\n    /**\n     * Create a UniversalEvents object\n     *\n     * @param {?(Set<string>|Array<string>)} [validEvents] - The set of events which this object should handle.\n     * If undefined, null, or empty, this object will handle all events.\n     */\n    constructor(validEvents) {\n        if (!validEvents) {\n            this._validEvents = null;\n        } else if (typeof validEvents === 'string') {\n            throw new Error('Use of a string is probably a typo, should be Set or Array, or other iterable');\n        } else {\n            this._validEvents = new Set(validEvents);\n        }\n\n        this._eventListeners = {};\n    }\n\n    _checkEventName(eventName) {\n        if (!eventName) {\n            throw new Error('Event name unspecified');\n        }\n        if (typeof eventName !== 'string') {\n            throw new Error('Event name must be string: ' + eventName);\n        }\n        if (this._validEvents && !this._validEvents.has(eventName)) {\n            throw new Error('Unknown event name: ' + eventName)\n        }\n    }\n\n    _getListenersForEvent(eventName) {\n        return this._eventListeners[eventName] || [];\n    }\n\n    /**\n     * Listen for an event. Alias for {@link UniversalEvents#on}\n     *\n     * @param {string} eventName - The name of the event to listen for\n     * @param {function(data: Object)} handler - The function which is called when the event is raised\n     * @return {UniversalEvents} - Returns the UniversalEvents object, allowing calls to be chained\n     */\n    addEventListener(eventName, handler) {\n        this._checkEventName(eventName);\n\n        if (!this._eventListeners[eventName]) {\n            this._eventListeners[eventName] = [];\n        }\n\n        this._eventListeners[eventName].push(handler);\n\n        return this;\n    }\n\n    /**\n     * Listen for an event. Alias for {@link UniversalEvents#addEventListener}\n     *\n     * @param {string} eventName - The name of the event to listen for\n     * @param {function(data: Object)} handler - The function which is called when the event is raised\n     * @return {UniversalEvents} - Returns the UniversalEvents object, allowing calls to be chained\n     */\n    on(eventName, handler) {\n        return this.addEventListener(eventName, handler);\n    }\n\n    /**\n     * Listen for an event. Remove listener after the first time it happens.\n     *\n     * @param {string} eventName - The name of the event to listen for\n     * @param {function(data: Object)} handler - The function which is called when the event is raised\n     * @return {UniversalEvents} - Returns the UniversalEvents object, allowing calls to be chained\n     */\n    once(eventName, handler) {\n        this._checkEventName(eventName);\n\n        var self = this;\n\n        function innerHandler(data) {\n            self.removeEventListener(eventName, innerHandler);\n\n            return handler(data);\n        }\n        return this.addEventListener(eventName, innerHandler);\n    }\n\n    /**\n     * Remove a listener for an event. Be careful when doing this, you should only really remove listeners that were added by you.\n     *\n     * @param {string} eventName - The name of the event the handler was attached to\n     * @param {function(data: Object)} handler - The function to remove\n     * @return {UniversalEvents} - Returns the UniversalEvents object, allowing calls to be chained\n     */\n    removeEventListener(eventName, handler) {\n        this._checkEventName(eventName);\n\n        var handlers = this._eventListeners[eventName];\n\n        if (handlers) {\n            var index = handlers.indexOf(handler);\n            handlers.splice(index, 1);\n        }\n\n        return this;\n    }\n\n    /**\n     * Raise an event. Causes all listeners of this event to run. Handlers are run before this function returns.\n     *\n     * Alias of {@link UniversalEvents#emit}\n     *\n     * @param {string} eventName - The name of the event to raise\n     * @param {?Object} [data] - An object passed to the handlers\n     * @return {boolean} - A boolean representing whether the event had any handlers\n     */\n    raiseEvent(eventName, data) {\n        this._checkEventName(eventName);\n\n        var handlers = this._eventListeners[eventName];\n\n        if (handlers && handlers.length > 0) {\n            for (var i = 0; i < handlers.length; i++) {\n                // run the code right now, if the user wants it run on next tick that is up to them\n                handlers[i].apply(this, [data]);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Raise an event. Causes all listeners of this event to run. Handlers are run before this function returns.\n     * Alias of {@link UniversalEvents#raiseEvent}\n     *\n     * @param {string} eventName - The name of the event to raise\n     * @param {?Object} [data] - An object passed to the handlers\n     * @return {boolean} - A boolean representing whether the event had any handlers\n     */\n    emit(eventName, data) {\n        return this.raiseEvent(eventName, data);\n    }\n\n    /**\n     * Await an event for success and another event for failure.\n     *\n     * @param {string} successEventName - The name of the event which will resolve the promise when raised\n     * @param {string} failureEventName - The name of the event which will reject the promise when raised\n     * @return {Promise} - A promise which will be resolved on success and rejected on failure\n     */\n    await(successEventName, failureEventName) {\n        var self = this;\n\n        this._checkEventName(successEventName);\n        this._checkEventName(failureEventName);\n        if (successEventName === failureEventName) {\n            throw new Error('Identical event name for success and failure: ' + failureEventName)\n        }\n\n        return new Promise(\n            function(resolve, reject) {\n                function successHandler(val) {\n                    self.removeEventListener(successEventName, successHandler);\n                    self.removeEventListener(failureEventName, failureHandler);\n\n                    resolve(val);\n                }\n\n                function failureHandler(err) {\n                    self.removeEventListener(successEventName, successHandler);\n                    self.removeEventListener(failureEventName, failureHandler);\n\n                    reject(err);\n                }\n\n                self.addEventListener(successEventName, successHandler);\n                self.addEventListener(failureEventName, failureHandler);\n            });\n    }\n\n    /**\n     * Listen for a success event and failure event. Uses a node-like callback. Remove listeners after the callback is called\n     *\n     * @param {string} successEventName - The name of the success event to listen for\n     * @param {string} failureEventName - The name of the failure event to listen for\n     * @param {function(err: Error, data: Object)} callback - The node-like callback function which is called when either event is raised\n     * @return {UniversalEvents} - Returns the UniversalEvents object, allowing calls to be chained\n     */\n    cbOnce(successEventName, failureEventName, callback) {\n        var self = this;\n\n        this._checkEventName(successEventName);\n        this._checkEventName(failureEventName);\n        if (successEventName === failureEventName) {\n            throw new Error('Identical event name for success and failure: ' + failureEventName)\n        }\n\n        function successHandler(val) {\n            self.removeEventListener(successEventName, successHandler);\n            self.removeEventListener(failureEventName, failureHandler);\n\n            callback(null, val);\n        }\n\n        function failureHandler(err) {\n            self.removeEventListener(successEventName, successHandler);\n            self.removeEventListener(failureEventName, failureHandler);\n\n            callback(err, undefined);\n        }\n\n        self.addEventListener(successEventName, successHandler);\n        self.addEventListener(failureEventName, failureHandler);\n\n        return this;\n    }\n}\n",null],"sourceRoot":"/source/"}